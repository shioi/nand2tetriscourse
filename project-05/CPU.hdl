
 CHIP CPU {

	 IN  inM[16],    // M value input  (M = contents of RAM[A])
         instruction[16],
         reset; // Signals whether to re-start the current
         // program (reset==1) or continue executing
         // the current program (reset==0).

	 OUT outM[16],        // M value output
         writeM,          // Write to M? 
         addressM[15],    // Address in data memory (of M)
         pc[15];          // address of next instruction

	 PARTS:
	 Not(in=instruction[15], out=forload);
	 Or(a=forload,b=instruction[5],out=finaload);
	 Mux16(a=instruction,b=aluo1,sel=instruction[15],out=mux1);
	 ARegister(in=mux1,load=finaload,
	 out=regA,out[0..14]=addressM,out=pcin);		// A register

	 //x input of ALU
	 And(a=instruction[4], b=instruction[15], out=Dload);
	 DRegister(in=aluo2, load=Dload,out=regD);

	 //y input of ALU
	 Mux16(a=regA,b=inM, sel=instruction[12],out=aluinY);


	 //ALU
	 ALU(x=regD,y=aluinY,
	 zx=instruction[11],
	 nx=instruction[10],
	 zy=instruction[9],
	 ny=instruction[8],
	 f=instruction[7],
	 no=instruction[6],
	 out=aluo1,
	 out=aluo2,
	 out=outM,
	 zr=eqz,
	 ng=lessz);

	 //to write in memory
	 And(a=instruction[3], b=instruction[15], out=memwrite);
	 Not(in=memwrite, out=tempw);
	 Not(in=tempw,out=writeM);

	 //PC
	 Or(a=eqz,b=lessz,out=temp);
	 Not(in=temp, out=grtz);

	 And(a=eqz, b=instruction[1], out=eqout);
	 And(a=lessz, b = instruction[2], out=lessout);
	 And(a=grtz, b=instruction[0], out=grtout);
	 Or(a=eqout, b=grtout, out=o1);
	 Or(a=o1, b=lessout,out=loadpctemp);
	 And(a=instruction[15], b=loadpctemp, out=loadpc);

	 PC(in=pcin,load=loadpc,inc=true,reset=reset,out[0..14]=pc);
 }
